package com.fon.client.forms;

import com.fon.client.controller.ClientController;
import com.fon.common.domain.*;
import com.fon.common.exceptions.ClientValidationException;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumn;
import com.fon.client.table.SeminarEnrollmentTableModel;
import com.fon.common.utils.TextAreaRenderer;
import com.fon.common.utils.Utility;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author Aleksa
 */
public class ChangeSeminarScheduleForm extends javax.swing.JDialog {

    private Admin loggedAdmin;
    private SeminarSchedule seminarScheduleOriginal;
    SeminarEnrollmentTableModel tableModel;

    /**
     * Creates new form AddSeminarSchedule
     */
    public ChangeSeminarScheduleForm(java.awt.Frame parent, boolean modal, Admin loggedAdmin, SeminarSchedule seminarSchedule) throws Exception {
        super(parent, modal);
        this.loggedAdmin = loggedAdmin;
        this.seminarScheduleOriginal = seminarSchedule;
        initComponents();
        prepareForm();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl = new javax.swing.JTable();
        btnAddParticipant = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        btnRemoveParticipant = new javax.swing.JButton();
        btnCreate = new javax.swing.JButton();
        cbSeminar = new javax.swing.JComboBox();
        cbParticipant = new javax.swing.JComboBox<>();
        cbEducationalInstitution = new javax.swing.JComboBox();
        txtDatetimeBegins = new javax.swing.JFormattedTextField();
        txtDatetimeEnds = new javax.swing.JFormattedTextField();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtNotes = new javax.swing.JTextArea();
        jSeparator = new javax.swing.JSeparator();
        btnSave = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Форма за измену термина семинара");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("Термин семинара");

        jLabel2.setText("Семинар:");

        jLabel3.setText("Датум почетка:");

        jLabel4.setText("Датум завршетка:");

        jLabel5.setText("Локација одржавања:");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setText("Пријавница семинара");

        tbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Миливоје Добричић", "MALE", "24"},
                {"Душица Цвијетин", "FEMALE", "23"}
            },
            new String [] {
                "Име и презиме", "Пол", "Старост"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbl);

        btnAddParticipant.setText("Додај пријавницу");
        btnAddParticipant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddParticipantActionPerformed(evt);
            }
        });

        jLabel7.setText("Учесник:");

        btnRemoveParticipant.setText("Обриши пријавницу");
        btnRemoveParticipant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveParticipantActionPerformed(evt);
            }
        });

        btnCreate.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnCreate.setText("Направи термин");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        cbSeminar.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ML model data integration: Delve into the craft of blending varied data origins to construct formidable machine learning models" }));

        cbParticipant.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Душица Цвијетин, ж, 23" }));

        cbEducationalInstitution.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Факултет организационих наука: Јове Илића 154" }));
        cbEducationalInstitution.setSelectedIndex(-1);

        txtDatetimeBegins.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(Utility.DATETIME_FORMAT)));
        txtDatetimeBegins.setText("23.12.2023 | 10:00");

        txtDatetimeEnds.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(Utility.DATETIME_FORMAT)));
        txtDatetimeEnds.setText("23.12.2023 | 18:00");

        jLabel8.setText("Прибелешка:");

        txtNotes.setColumns(20);
        txtNotes.setLineWrap(true);
        txtNotes.setRows(5);
        jScrollPane2.setViewportView(txtNotes);

        jSeparator.setForeground(java.awt.Color.black);

        btnSave.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnSave.setText("Запамти термин");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cbEducationalInstitution, javax.swing.GroupLayout.PREFERRED_SIZE, 454, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(33, 33, 33)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(29, 29, 29)
                                        .addComponent(txtDatetimeEnds, javax.swing.GroupLayout.PREFERRED_SIZE, 454, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(cbSeminar, javax.swing.GroupLayout.PREFERRED_SIZE, 454, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(txtDatetimeBegins, javax.swing.GroupLayout.PREFERRED_SIZE, 454, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 454, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(btnRemoveParticipant, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(btnAddParticipant, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel6))
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addComponent(cbParticipant, javax.swing.GroupLayout.PREFERRED_SIZE, 454, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel1))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addComponent(jSeparator, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(117, 117, 117)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtDatetimeEnds, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(cbSeminar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtDatetimeBegins, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(cbEducationalInstitution, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addComponent(jSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(cbParticipant, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAddParticipant, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnRemoveParticipant, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)))
                .addContainerGap())
        );

        btnCreate.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        try {
            SeminarSchedule seminarSchedule = getSeminarScheduleFromForm();

            ClientController.getInstance().createSeminarSchedule(seminarSchedule);
            JOptionPane.showMessageDialog(rootPane, "Систем је направио термин семинара", "Успешно прављење термина", JOptionPane.INFORMATION_MESSAGE);

            this.dispose();
        } catch (ClientValidationException ex) {
            JOptionPane.showMessageDialog(rootPane, ex.getMessage(), "Грешка при валидацији", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            Logger.getLogger(ChangeSeminarScheduleForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(rootPane, "Систем не може направити термин семинара", "Неуспешно прављење термина семинара", JOptionPane.ERROR_MESSAGE);        // TODO add your handling code here:
        }
    }//GEN-LAST:event_btnCreateActionPerformed

    private void btnAddParticipantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddParticipantActionPerformed
        Participant p = (Participant) cbParticipant.getSelectedItem();
        String notes = txtNotes.getText();
        SeminarEnrollment se = new SeminarEnrollment(null, p, notes);
        tableModel.addRow(se);
    }//GEN-LAST:event_btnAddParticipantActionPerformed

    private void btnRemoveParticipantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveParticipantActionPerformed
        int i = tbl.getSelectedRow();

        if (i != -1) {
            tableModel.removeRow(i);
        }
    }//GEN-LAST:event_btnRemoveParticipantActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        try {
            SeminarSchedule seminarSchedule = getSeminarScheduleFromForm();
            seminarSchedule.setSeminarScheduleID(seminarScheduleOriginal.getSeminarScheduleID());
            seminarSchedule.setCreatedByAdmin(seminarScheduleOriginal.getCreatedByAdmin());

            if (seminarSchedule.equalsAll(seminarScheduleOriginal)) {
                JOptionPane.showMessageDialog(rootPane, "Ништа нисте изменили", "Упозорење", JOptionPane.WARNING_MESSAGE);
                return;
            }

            setStateForSeminarSchedule(seminarSchedule);

            List<SeminarEnrollment> seminarEnrollmentsOriginal = seminarScheduleOriginal.getSeminarEnrollments();
            List<SeminarEnrollment> seminarEnrollments = setStateForSeminarEnrollments(seminarSchedule, seminarEnrollmentsOriginal);
            seminarSchedule.setSeminarEnrollments(seminarEnrollments);

            ClientController.getInstance().saveSeminarSchedule(seminarSchedule);
            JOptionPane.showMessageDialog(rootPane, "Систем је запамтио термин семинара", "Успешно чување термина семинара", JOptionPane.INFORMATION_MESSAGE);
            this.dispose();
        } catch (ClientValidationException ex) {
            JOptionPane.showMessageDialog(rootPane, ex.getMessage(), "Грешка при валидацији", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            Logger.getLogger(ChangeSeminarScheduleForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(rootPane, "Систем не може запамтити термин семинара", "Неуспешно чување термина семинара", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private List<SeminarEnrollment> setStateForSeminarEnrollments(SeminarSchedule seminarSchedule, List<SeminarEnrollment> seminarEnrollmentsOriginal) {
        List<SeminarEnrollment> seminarEnrollments = seminarSchedule.getSeminarEnrollments();

        //Handle changed and created
        for (SeminarEnrollment se : seminarEnrollments) {

            if (seminarEnrollmentsOriginal.contains(se)) {

                int index = seminarEnrollmentsOriginal.indexOf(se);
                SeminarEnrollment seminarEnrollmentOriginal = seminarEnrollmentsOriginal.get(index);

                if (!seminarEnrollmentOriginal.equalsAll(se)) {
                    se.setState(State.CHANGED);
                }

            } else {
                se.setState(State.CREATED);
            }
        }

        //Handle deleted
        for (SeminarEnrollment seOriginal : seminarEnrollmentsOriginal) {
            if (!seminarEnrollments.contains(seOriginal)) {
                int index = seminarEnrollmentsOriginal.indexOf(seOriginal);

                //Deleted seminarEnrollment
                SeminarEnrollment seminarEnrollmentOriginal = seminarEnrollmentsOriginal.get(index);
                seminarEnrollmentOriginal.setState(State.DELETED);

                seminarEnrollments.add(seminarEnrollmentOriginal);
            }
        }
        return seminarEnrollments;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddParticipant;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnRemoveParticipant;
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox cbEducationalInstitution;
    private javax.swing.JComboBox<String> cbParticipant;
    private javax.swing.JComboBox cbSeminar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator;
    private javax.swing.JTable tbl;
    private javax.swing.JFormattedTextField txtDatetimeBegins;
    private javax.swing.JFormattedTextField txtDatetimeEnds;
    private javax.swing.JTextArea txtNotes;
    // End of variables declaration//GEN-END:variables

    private void prepareForm() throws Exception {
        this.setLocationRelativeTo(null);
        this.setResizable(false);

        loadSeminars();
        loadEducationalInstitutions();
        loadParticipants();
        prepareFields();
        prepareTable();

    }

    private void prepareFields() {
        if (seminarScheduleOriginal == null) {
            btnCreate.setVisible(true);
            btnSave.setVisible(false);

            setTitle("Форма за прављење термина семинара");
        } else {
            btnCreate.setVisible(false);
            btnSave.setVisible(true);
            setTitle("Форма за измену термина семинара");

            cbSeminar.setSelectedItem(seminarScheduleOriginal.getSeminar());
            txtDatetimeBegins.setValue(seminarScheduleOriginal.getDatetimeBegins());
            txtDatetimeEnds.setValue(seminarScheduleOriginal.getDatetimeEnds());
            cbEducationalInstitution.setSelectedItem(seminarScheduleOriginal.getEducationalInstitution());
        }
    }

    private void prepareTable() {
        try {
            tableModel = new SeminarEnrollmentTableModel();
            tbl.setModel(tableModel);
            TableColumn tcName = tbl.getColumnModel().getColumn(4);
            tcName.setCellRenderer(new TextAreaRenderer());
            tbl.setRowHeight(40);

            if (seminarScheduleOriginal != null) {
                tableModel.setList(seminarScheduleOriginal.getSeminarEnrollments());
                seminarScheduleOriginal.setSeminarEnrollments(tableModel.getListOriginal());
            }
        } catch (Exception ex) {
            Logger.getLogger(ViewParticipantsForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(rootPane, "Систем не може наћи учеснике", "Неуспешно налажење учесника", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void loadSeminars() throws Exception {
        cbSeminar.setModel(new DefaultComboBoxModel(ClientController.getInstance().getAllSeminars().toArray()));
        cbSeminar.setSelectedIndex(-1);
    }

    private void loadEducationalInstitutions() throws Exception {
        cbEducationalInstitution.setModel(new DefaultComboBoxModel(ClientController.getInstance().getAllEducationalInstitutions().toArray()));
        cbEducationalInstitution.setSelectedIndex(-1);
    }

    private void loadParticipants() throws Exception {
        cbParticipant.setModel(new DefaultComboBoxModel(ClientController.getInstance().getAllParticipants().toArray()));
        cbParticipant.setSelectedIndex(-1);
    }

    private void addSeminarScheduleToSeminarEnrollments(SeminarSchedule sc, List<SeminarEnrollment> seminarEnrollments) {
        for (SeminarEnrollment se : seminarEnrollments) {
            se.setSeminarSchedule(sc);
        }
    }

    private List<SeminarEnrollment> validateSeminarEnrollments(List<SeminarEnrollment> list) throws ClientValidationException {
        for (SeminarEnrollment se : list) {
            if (se.getParticipant() == null) {
                throw new ClientValidationException("Учесник у неком реду табеле не постоји");
            }
        }
        return list;
    }

    private SeminarSchedule getSeminarScheduleFromForm() throws ClientValidationException {
        Seminar seminar = (Seminar) cbSeminar.getSelectedItem();
        Date datetimeBegins = (Date) txtDatetimeBegins.getValue();
        Date datetimeEnds = (Date) txtDatetimeEnds.getValue();
        EducationalInstitution educationalInstitution = (EducationalInstitution) cbEducationalInstitution.getSelectedItem();
        List<SeminarEnrollment> seminarEnrollments = validateSeminarEnrollments(tableModel.getList());
        SeminarSchedule seminarSchedule = new SeminarSchedule(0, datetimeBegins, datetimeEnds, loggedAdmin, seminar, educationalInstitution, seminarEnrollments);
        addSeminarScheduleToSeminarEnrollments(seminarSchedule, seminarEnrollments);

        return seminarSchedule;
    }

    private void setStateForSeminarSchedule(SeminarSchedule seminarSchedule) {
        if (!seminarSchedule.equalsAllWithoutSeminarEnrollments(seminarScheduleOriginal)) {
            seminarSchedule.setState(State.CHANGED);
        }
    }
}
