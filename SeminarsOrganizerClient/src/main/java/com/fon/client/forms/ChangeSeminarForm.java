package com.fon.client.forms;

import com.fon.client.controller.ClientController;
import com.fon.common.domain.*;
import com.fon.common.exceptions.ClientValidationException;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.TableColumn;
import com.fon.client.table.SeminarTopicTableModel;
import com.fon.common.utils.TextAreaRenderer;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author Aleksa
 */
public class ChangeSeminarForm extends javax.swing.JDialog {

    private final Admin loggedAdmin;
    private final Seminar seminarOriginal;
    private SeminarTopicTableModel tableModel;

    /**
     * Creates new form SeminarForm
     */
    public ChangeSeminarForm(java.awt.Frame parent, boolean modal, Admin loggedAdmin, Seminar seminarOriginal) throws Exception {
        super(parent, modal);
        this.loggedAdmin = loggedAdmin;
        this.seminarOriginal = seminarOriginal;
        initComponents();
        prepareForm();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl = new javax.swing.JTable();
        btnAdd = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        btnCreate = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtDescription = new javax.swing.JTextArea();
        btnSave = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Форма за измену семинара");

        jLabel1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel1.setText("Семинар");

        jLabel2.setText("Име:");

        jLabel3.setText("Опис:");

        txtName.setText("ML model data integration");

        tbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Data Fusion Techniques for Enhanced Model Performance", "Samuel Nickolson"},
                {"Ethical Considerations in Data Integration for Machine Learning", "David Black"},
                {"Scalable Data Integration Strategies for Large-Scale Machine Learning", "George Brandon"},
                {"Real-time Data Integration Techniques for Dynamic Machine Learning Environments", "Mary Goggins"}
            },
            new String [] {
                "Назив", "Предавач"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tbl);
        if (tbl.getColumnModel().getColumnCount() > 0) {
            tbl.getColumnModel().getColumn(1).setPreferredWidth(10);
        }

        btnAdd.setText("Додај тему");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnRemove.setText("Обриши тему");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        btnCreate.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnCreate.setText("Направи семинар");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel4.setText("Теме семинара");

        jScrollPane2.setAutoscrolls(true);

        txtDescription.setColumns(20);
        txtDescription.setLineWrap(true);
        txtDescription.setRows(5);
        txtDescription.setText("Delve into the craft of blending varied data origins to construct formidable machine learning models");
        jScrollPane2.setViewportView(txtDescription);

        btnSave.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnSave.setText("Запамти семинар");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnRemove, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnSave, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnCreate, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                            .addComponent(btnAdd, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2)
                            .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)))
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        try {
            Seminar seminar = getSeminarFromForm();

            //                JOptionPane.showMessageDialog(rootPane, "Систем је сачувао измене о семинару", "Успешна измена семинара", JOptionPane.INFORMATION_MESSAGE);
            //                JOptionPane.showMessageDialog(rootPane, "Систем не може учитати о семинару", "Неуспешна измена семинара", JOptionPane.ERROR_MESSAGE);
            ClientController.getInstance().createSeminar(seminar);
            JOptionPane.showMessageDialog(rootPane, "Систем је додао семинар", "Успешно прављење семинара", JOptionPane.INFORMATION_MESSAGE);
            this.dispose();
        } catch (ClientValidationException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Грешка при валидацији", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            Logger.getLogger(ChangeSeminarForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(rootPane, "Систем не може направити семинар", "Неуспешнo прављење семинара", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnCreateActionPerformed

    private Seminar getSeminarFromForm() throws ClientValidationException {
        String name = validateName(txtName.getText());
        String description = validateDescription(txtDescription.getText());
        List<SeminarTopic> seminarTopics = validateSeminarTopics(tableModel.getSeminarTopics());
        Seminar seminar = new Seminar(0, name, description, loggedAdmin, seminarTopics);
        addSeminarToSeminarTopics(seminar, seminarTopics);
        return seminar;
    }

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        tableModel.addRow();
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        int index = tbl.getSelectedRow();
        if (index != -1) {
            tableModel.removeRow(index);
        }
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        try {
            Seminar seminar = getSeminarFromForm();
            seminar.setCreatedByAdmin(loggedAdmin);
            seminar.setSeminarID(seminarOriginal.getSeminarID());

            if (seminar.equalsAll(seminarOriginal)) {
                JOptionPane.showMessageDialog(rootPane, "Ништа нисте изменили", "Упозорење", JOptionPane.WARNING_MESSAGE);
                return;
            }

            setStateForSeminar(seminar);

            List<SeminarTopic> seminarTopicsOriginal = seminarOriginal.getSeminarTopics();
            List<SeminarTopic> seminarTopics = setStateForSeminarTopics(seminar, seminarTopicsOriginal);
            seminar.setSeminarTopics(seminarTopics);

            ClientController.getInstance().saveSeminar(seminar);
            JOptionPane.showMessageDialog(rootPane, "Систем је запамтио семинар", "Успешна измена семинара", JOptionPane.INFORMATION_MESSAGE);
            this.dispose();
        } catch (ClientValidationException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Грешка при валидацији", JOptionPane.ERROR_MESSAGE);
        } catch (Exception ex) {
            Logger.getLogger(ChangeSeminarForm.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(rootPane, "Систем не може запамтити семинар", "Успешна измена семинара", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSave;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tbl;
    private javax.swing.JTextArea txtDescription;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables

    private void prepareForm() throws IOException, ClassNotFoundException {
        this.setLocationRelativeTo(null);
        this.setResizable(false);

        prepareFields();
        prepareTable();
    }

    private void prepareTable() throws IOException, ClassNotFoundException {
        tableModel = new SeminarTopicTableModel();
        tbl.setModel(tableModel);

        if (seminarOriginal != null) {
            tableModel.setSeminarTopics(seminarOriginal.getSeminarTopics());
            seminarOriginal.setSeminarTopics(tableModel.getSeminarTopicsOriginal());
        }

        TableColumn tcName = tbl.getColumnModel().getColumn(0);
        tcName.setCellRenderer(new TextAreaRenderer());
        tbl.setRowHeight(40);
        TableColumn tcPresenter = tbl.getColumnModel().getColumn(1);
        tcPresenter.setPreferredWidth(1);
    }

    private String validateName(String name) throws ClientValidationException {
        if (name.isEmpty()) {
            throw new ClientValidationException("Име семинара не сме бити празно");
        }
        return name;
    }

    private String validateDescription(String description) throws ClientValidationException {
        if (description.isEmpty()) {
            throw new ClientValidationException("Опис семинара не сме бити празан");
        }
        return description;
    }

    private List<SeminarTopic> validateSeminarTopics(List<SeminarTopic> seminarTopics) throws ClientValidationException {
        for (SeminarTopic seminarTopic : seminarTopics) {
            if (seminarTopic.getName() == null || seminarTopic.getName().isEmpty()) {
                throw new ClientValidationException("У табели је неки назив теме семинара празан");
            }
            if (seminarTopic.getPresenter() == null || seminarTopic.getPresenter().isEmpty()) {
                throw new ClientValidationException("У табели је неки предавач теме семинара празан");
            }
        }
        return seminarTopics;
    }

    private void addSeminarToSeminarTopics(Seminar seminar, List<SeminarTopic> seminarTopics) {
        for (SeminarTopic seminarTopic : seminarTopics) {
            seminarTopic.setSeminar(seminar);
        }
    }

    private void prepareFields() {
        if (seminarOriginal == null) {
            btnCreate.setVisible(true);
            btnSave.setVisible(false);

            setTitle("Форма за прављење семинара");
        } else {
            btnCreate.setVisible(false);
            btnSave.setVisible(true);

            setTitle("Форма за измену семинара");

            txtName.setText(seminarOriginal.getName());
            txtDescription.setText(seminarOriginal.getDescription());
        }
    }

    private List<SeminarTopic> setStateForSeminarTopics(Seminar seminar, List<SeminarTopic> seminarTopicsOriginal) {
        List<SeminarTopic> seminarTopics = seminar.getSeminarTopics();

        //Handle changed and created
        for (SeminarTopic st : seminarTopics) {
            if (seminarTopicsOriginal.contains(st)) {
                int index = seminarTopicsOriginal.indexOf(st);
                SeminarTopic seminarTopicOriginal = seminarTopicsOriginal.get(index);

                if (!seminarTopicOriginal.equalsAll(st)) {
                    st.setState(State.CHANGED);
                }

            } else {
                st.setState(State.CREATED);
            }
        }

        //Handle deleted
        for (SeminarTopic stOriginal : seminarTopicsOriginal) {
            if (!seminarTopics.contains(stOriginal)) {
                int index = seminarTopicsOriginal.indexOf(stOriginal);

                //Deleted seminarEnrollment
                SeminarTopic seminarTopicOriginal = seminarTopicsOriginal.get(index);
                seminarTopicOriginal.setState(State.DELETED);

                seminarTopics.add(seminarTopicOriginal);
            }
        }
        return seminarTopics;
    }

    private void setStateForSeminar(Seminar seminar) {
        if (!seminar.equalsAllWithoutSeminarTopics(seminarOriginal)) {
            seminar.setState(State.CHANGED);
        }
    }
}
